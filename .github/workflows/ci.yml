
name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches:
      - feature/**
      - release/**
      - bugfix/**
      - hotfix/**

    tags:
      - '**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  IMAGE_NAME: nvim.alpix

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_docker_image:
    name: Build docker image and push
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Get docker version
        run: | 
          echo "::set-output name=version::$(git ls-files -s Dockerfile | awk '{print $2}' | cut -c1-16)"
        id: docker_version

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Check if image exists
        id: image_exists
        run: |
          response=$(docker manifest inspect ghcr.io/${{ github.repository }}/$IMAGE_NAME:${{ steps.docker_version.outputs.version }} > /dev/null ; echo $?)
          echo ::set-output name=image_exists::$(echo ${response})

      - name: Build docker image 
        run: make image

      # 0 If exists. 1 Else
      # References:
      #   [1] https://stackoverflow.com/questions/32113330/check-if-imagetag-combination-already-exists-on-docker-hub
      - name: Push image to Github Registry
        run: |
              IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME

              # Change all uppercase to lowercase
              IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

              # Strip git ref prefix from version
              VERSION=$(git ls-files -s Dockerfile | awk '{print $2}' | cut -c1-16)

              echo IMAGE_ID=$IMAGE_ID
              echo VERSION=$VERSION
              echo IMAGE_NAME=$IMAGE_NAME

              docker tag ${{ github.actor }}/$IMAGE_NAME:$VERSION $IMAGE_ID:$VERSION
              docker push $IMAGE_ID:$VERSION

              docker tag $IMAGE_ID:$VERSION $IMAGE_ID:latest
              docker push $IMAGE_ID:latest

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.previous_tag.outputs.tag }}...${{ steps.current_tag.outputs.tag }}
          draft: false
          prerelease: false
